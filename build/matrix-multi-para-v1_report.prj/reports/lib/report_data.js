var areaJSON={"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[45.2477, 23.8578, 22.8722, 26.0229, 9.55204], "total":[202421, 390840, 706, 145, 71], "name":"Kernel System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"Static Partition", "type":"partition", "children":[{"name":"Board interface", "type":"resource", "data":[179950, 358572, 492, 123, 0], "details":[{"type":"text", "text":"Platform interface logic."}]}]}, {"name":"Global interconnect", "type":"resource", "data":[12524, 15522, 104, 0, 0], "details":[{"type":"text", "text":"Global interconnect for 3 global loads and 1 global store. Reduce number of global loads and stores to simplify global interconnect."}, {"type":"brief", "text":"For 3 global loads and 1 global store."}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Global Memory Interconnect", "link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}]}]}, {"name":"System description ROM", "type":"resource", "data":[0, 67, 2, 0, 0], "details":[{"type":"text", "text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program."}, {"type":"brief", "text":"Contains information for the host."}]}, {"name":"MMpara_v1", "compute_units":1, "type":"function", "total_percent":[2.19387, 1.33041, 0.976065, 3.98083, 1.44928], "total_kernel_resources":[9947, 16679, 108, 22, 71], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Function overhead", "type":"resource", "data":[1338, 2411, 0, 0, 10], "details":[{"type":"text", "text":"Kernel dispatch logic."}, {"type":"brief", "text":"Kernel dispatch logic."}]}, {"name":"MMpara_v1.B1", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[91, 470, 3, 0, 4], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[91, 470, 3, 0, 4]}]}, {"name":"Cluster logic", "type":"resource", "data":[16, 12, 0, 0, 9], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:80", "type":"resource", "data":[895, 4178, 15, 1, 31], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":80}]], "children":[{"name":"32-bit Floating-point Add", "type":"resource", "count":1, "data":[0, 0, 0, 1, 0]}, {"name":"Load", "type":"resource", "count":1, "data":[504, 2050, 15, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}, {"name":"Store", "type":"resource", "count":1, "data":[391, 2128, 0, 0, 31], "details":[{"type":"text", "text":"Store uses a Burst-coalesced LSU"}, {"type":"brief", "text":"Burst-coalesced LSU"}]}], "replace_name":"true"}, {"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:80 > \\naccessor.hpp:325 > accessor.hpp:1533 > \\naccessor.hpp:817", "type":"resource", "data":[338, 88, 0, 5, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":80}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":325}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":1533}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":817}]], "children":[{"name":"64-bit Integer Add", "type":"resource", "count":3, "data":[188, 0, 0, 0, 0]}, {"name":"64-bit Integer Multiply", "type":"resource", "count":1, "data":[150, 88, 0, 5, 0]}], "replace_name":"true"}, {"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:80 > \\naccessor.hpp:332 > accessor.hpp:1540 > \\naccessor.hpp:817", "type":"resource", "data":[338, 88, 0, 5, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":80}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":332}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":1540}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":817}]], "children":[{"name":"64-bit Integer Add", "type":"resource", "count":3, "data":[188, 0, 0, 0, 0]}, {"name":"64-bit Integer Multiply", "type":"resource", "count":1, "data":[150, 88, 0, 5, 0]}], "replace_name":"true"}]}]}, {"name":"MMpara_v1.B2", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[138, 639, 6, 0, 8], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[138, 639, 6, 0, 8]}]}, {"name":"Cluster logic", "type":"resource", "data":[16, 12, 0, 0, 9], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:77", "type":"resource", "data":[15, 1, 0, 0, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":77}]], "children":[{"name":"64-bit Integer Compare", "type":"resource", "count":1, "data":[15, 1, 0, 0, 0]}], "replace_name":"true"}, {"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:78", "type":"resource", "data":[6086, 8604, 84, 1, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":78}]], "children":[{"name":"32-bit Floating-point Multiply-Add", "type":"resource", "count":2, "data":[0, 0, 0, 1, 0]}, {"name":"Load", "type":"resource", "count":2, "data":[6086, 8604, 84, 0, 0], "details":[{"type":"text", "text":"Load uses a Burst-coalesced cached LSU.  Load with a private 512 kilobit cache. Cache is not shared with any other load. It is flushed on kernel start. Use Dynamic Profiler to verify cache effectiveness. Other kernels should not be updating the data in global memory while this kernel is using it. Cache is created when memory access pattern is data-dependent or appears to be repetitive. Simplify access pattern or mark pointer as \'volatile\' to disable generation of this cache."}, {"type":"brief", "text":"Burst-coalesced cached LSU,\\nLoad with a private 512 kilobit cache"}]}], "replace_name":"true"}, {"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:78 > \\naccessor.hpp:332 > accessor.hpp:1540 > \\naccessor.hpp:817", "type":"resource", "data":[676, 176, 0, 10, 0], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":78}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":332}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":1540}, {"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp", "line":817}]], "children":[{"name":"64-bit Integer Add", "type":"resource", "count":6, "data":[376, 0, 0, 0, 0]}, {"name":"64-bit Integer Multiply", "type":"resource", "count":2, "data":[300, 176, 0, 10, 0]}], "replace_name":"true"}]}]}]}]};
var area_srcJSON={"children":[{"children":[{"data":[179950,358572,492,123,0],"details":[{"text":"Platform interface logic.","type":"text"}],"name":"Board interface","type":"resource"}],"name":"Static Partition","type":"partition"},{"data":[12524,15522,104,0,0],"details":[{"text":"Global interconnect for 3 global loads and 1 global store. Reduce number of global loads and stores to simplify global interconnect.","type":"text"},{"text":"For 3 global loads and 1 global store.","type":"brief"},{"links":[{"guide":"Best Practices Guide : Global Memory Interconnect","link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/hnj1476724450050.html"}],"text":"See %L for more information","type":"text"}],"name":"Global interconnect","type":"resource"},{"data":[0,67,2,0,0],"details":[{"text":"This read-only memory contains information for the host about the system and about each kernel in the system, including kernel names, arguments, and attributes. The system description ROM ensures that the binary image on the FPGA is compatible with the host program.","type":"text"},{"text":"Contains information for the host.","type":"brief"}],"name":"System description ROM","type":"resource"},{"children":[{"data":[32,24,0,0,18],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[1338,2411,0,0,10],"details":[{"text":"Kernel dispatch logic.","type":"text"},{"text":"Kernel dispatch logic.","type":"brief"}],"name":"Function overhead","type":"resource"},{"children":[{"count":2,"data":[229,1109,9,0,12],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[229,1109,9,0,12],"name":"No Source Line","type":"resource"},{"children":[{"children":[{"count":1,"data":[0,0,0,1,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"32-bit Floating-point Add","type":"resource"},{"count":1,"data":[504,2050,15,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"Load","type":"resource"},{"count":1,"data":[391,2128,0,0,31],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"Store","type":"resource"}],"data":[895,4178,15,1,31],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894},{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp","line":80}]],"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:80","replace_name":true,"type":"resource"},{"children":[{"count":3,"data":[188,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Add","type":"resource"},{"count":1,"data":[150,88,0,5,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Multiply","type":"resource"}],"data":[338,88,0,5,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894},{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp","line":80},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":325},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":1533},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":817}]],"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:80 > \\naccessor.hpp:325 > accessor.hpp:1533 > \\naccessor.hpp:817","replace_name":true,"type":"resource"},{"children":[{"count":3,"data":[188,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Add","type":"resource"},{"count":1,"data":[150,88,0,5,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Multiply","type":"resource"}],"data":[338,88,0,5,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894},{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp","line":80},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":332},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":1540},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":817}]],"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:80 > \\naccessor.hpp:332 > accessor.hpp:1540 > \\naccessor.hpp:817","replace_name":true,"type":"resource"},{"children":[{"count":1,"data":[15,1,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Compare","type":"resource"}],"data":[15,1,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894},{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp","line":77}]],"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:77","replace_name":true,"type":"resource"},{"children":[{"count":2,"data":[0,0,0,1,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"32-bit Floating-point Multiply-Add","type":"resource"},{"count":2,"data":[6086,8604,84,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"Load","type":"resource"}],"data":[6086,8604,84,1,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894},{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp","line":78}]],"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:78","replace_name":true,"type":"resource"},{"children":[{"count":6,"data":[376,0,0,0,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Add","type":"resource"},{"count":2,"data":[300,176,0,10,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":"894"}]],"name":"64-bit Integer Multiply","type":"resource"}],"data":[676,176,0,10,0],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894},{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp","line":78},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":332},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":1540},{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/accessor.hpp","line":817}]],"name":"handler.hpp:894 > matrix-multi-para-v1.cpp:78 > \\naccessor.hpp:332 > accessor.hpp:1540 > \\naccessor.hpp:817","replace_name":true,"type":"resource"}],"data":[8348,13135,99,22,31],"debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp","line":894}]],"name":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp:894","replace_name":"true","type":"resource"}],"compute_units":1,"data":[9947,16679,108,22,71],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"MMpara_v1","total_kernel_resources":[9947,16679,108,22,71],"total_percent":[2.19387,1.33041,0.976065,3.98083,1.44928],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[22471,32268,214,22,71],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"Kernel System","total":[202421,390840,706,145,71],"total_percent":[45.2477,23.8578,22.8722,26.0229,9.55204],"type":"module"};
var mavJSON={"nodes":[{"type":"kernel", "id":2, "name":"MMpara_v1", "children":[{"type":"bb", "id":3, "name":"MMpara_v1.B0", "details":[{"type":"table", "Latency":"1"}]}, {"type":"bb", "id":4, "name":"MMpara_v1.B1", "children":[{"type":"inst", "id":6, "name":"Load", "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":80}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"10", "Latency":"238", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":7, "name":"Store", "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":80}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced", "Stall-free":"No", "Start Cycle":"255", "Latency":"2", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":10, "name":"Begin", "details":[{"type":"table", "Start Cycle":"0", "Latency":"1"}]}, {"type":"inst", "id":11, "name":"End", "details":[{"type":"table", "Start Cycle":"257", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"257"}]}, {"type":"bb", "id":5, "name":"MMpara_v1.B2", "children":[{"type":"inst", "id":8, "name":"Load", "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":78}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced cached", "Stall-free":"No", "Start Cycle":"11", "Latency":"238", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":9, "name":"Load", "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":78}]], "details":[{"type":"table", "Width":"32 bits", "Type":"Burst-coalesced cached", "Stall-free":"No", "Start Cycle":"11", "Latency":"238", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Load-Store Units", "link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/yeo1491314105959.html"}]}]}]}, {"type":"inst", "id":12, "name":"Loop Input", "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":77}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"13"}]}, {"type":"inst", "id":13, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"257", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"257", "II":"n/a", "Subloops":"No", "Pipelined":"No", "Fmax Bottlenecks":"No", "Loop Info":"Loop is not pipelined. See Loops Analysis for more information."}]}]}, {"type":"memtype", "id":1, "name":"Global Memory", "children":[{"type":"memsys", "id":14, "name":"DDR", "details":[{"type":"table", "Number of banks":"2"}]}]}], "links":[{"from":13, "to":10}, {"from":6, "to":11}, {"from":7, "to":11}, {"from":13, "to":12}, {"from":3, "to":12}, {"from":8, "to":13}, {"from":9, "to":13}, {"from":10, "to":6}, {"from":6, "to":7}, {"from":12, "to":8}, {"from":12, "to":9}, {"from":14, "to":8}, {"from":14, "to":6}, {"from":7, "to":14}, {"from":14, "to":9}]};
var loopsJSON={"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Kernel: MMpara_v1", "data":["", "", ""], "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":72}]], "details":[{"type":"brief", "text":"ND-Range"}, {"type":"text", "text":"ND-Range"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Best Practices Guide : Kernels", "link":"file:////glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/lib/oclfpga/aoc_help_pages/ipp1476408832230.html"}]}], "children":[{"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"accessor.hpp", "line":883}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"accessor.hpp", "line":883}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"accessor.hpp", "line":883}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"accessor.hpp", "line":883}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"MMpara_v1.B2", "data":["No", "n/a", "n/a"], "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":77}]], "details":[{"type":"brief", "text":"Thread capacity = 258"}, {"type":"text", "text":"Thread capacity = 258"}], "children":[]}]}]};
var loop_attrJSON={"name":"loop_attributes", "id":4294967295, "nodes":[{"name":"MMpara_v1", "id":2816043392, "clk":"No", "fmax":"240.00", "type":"kernel", "children":[{"name":"MMpara_v1.B0", "id":2815555984, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"0.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}, {"name":"MMpara_v1.B2", "id":2815265600, "af":"240.00", "br":"1", "ci":"0", "fo":"Disabled", "ii":"n/a", "ll":"1", "lt":"257.000000", "mi":"n/a", "pl":"No", "tc":"0", "tn":"1", "details":[{"type":"text", "text":"Hyper-Optimized loop structure: n/a"}], "debug":[[{"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":77}]], "type":"loop"}, {"name":"MMpara_v1.B1", "id":2815265520, "af":"240.00", "br":"0", "ci":"0", "fo":"Disabled", "ii":"1", "ll":"1", "lt":"257.000000", "mi":"n/a", "pl":"Yes", "tc":"0", "tn":"1", "type":"bb"}]}]};
var summaryJSON={"performanceSummary":{"name":"Kernel Summary", "columns":["Kernel Name", "Kernel Type", "Autorun", "Workgroup Size", "# Compute Units"], "children":[{"name":"MMpara_v1", "data":["NDRange", "No", "n/a", 1], "details":[{"type":"text", "text":"Kernel type: NDRange"}, {"type":"text", "text":"The kernel does not use any work-group information (such as get_local_id() or get_group_id()).Local work-group size will be automatically modified to match global work-group size on launch.This is a hardware optimization."}], "debug":[[{"filename":"", "line":0}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Kernel Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"MMpara_v1", "data":[9947, 16679, 108, 22, 71], "debug":[[{"filename":"", "line":0}]]}, {"name":"Global Interconnect", "classes":["summary-highlight", "nohover"], "data":[12524, 15522, 104, 0, 0]}, {"name":"Board Interface", "classes":["summary-highlight", "nohover"], "data":[179950, 358572, 492, 123, 0]}, {"name":"System description ROM", "classes":["summary-highlight", "nohover"], "data":[0, 67, 2, 0, 0]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[202421, 390840, 706, 145, 71], "data_percent":[23.6916, 22.8722, 26.0229, 9.55204]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[{"name":"Load uses a Burst-coalesced cached LSU", "details":[{"type":"text", "text":"Load with a private 512 kilobit cache. Cache is not shared with any other load. It is flushed on kernel start. Use Dynamic Profiler to verify cache effectiveness. Other kernels should not be updating the data in global memory while this kernel is using it. Cache is created when memory access pattern is data-dependent or appears to be repetitive. Simplify access pattern or mark pointer as \'volatile\' to disable generation of this cache."}], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":78}]]}, {"name":"Load uses a Burst-coalesced cached LSU", "details":[{"type":"text", "text":"Load with a private 512 kilobit cache. Cache is not shared with any other load. It is flushed on kernel start. Use Dynamic Profiler to verify cache effectiveness. Other kernels should not be updating the data in global memory while this kernel is using it. Cache is created when memory access pattern is data-dependent or appears to be repetitive. Simplify access pattern or mark pointer as \'volatile\' to disable generation of this cache."}], "debug":[[{"filename":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/compiler/2021.2.0/linux/bin/../include/sycl/CL/sycl/handler.hpp", "line":894}, {"filename":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "line":78}]]}]}};
var warningsJSON={"nodes":[]};
var fileJSON=[{"path":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/dev-utilities/2021.2.0/include/dpc_common.hpp", "name":"dpc_common.hpp", "has_active_debug_locs":false, "absName":"/glob/development-tools/versions/oneapi/2021.2/inteloneapi/dev-utilities/2021.2.0/include/dpc_common.hpp", "content":"//==============================================================\012// Copyright © 2020 Intel Corporation\012//\012// SPDX-License-Identifier: MIT\012// =============================================================\012\012#ifndef _DP_HPP\012#define _DP_HPP\012\012#pragma once\012\012#include <stdlib.h>\012#include <exception>\012\012#include <CL/sycl.hpp>\012\012namespace dpc_common {\012// this exception handler with catch async exceptions\012static auto exception_handler = [](cl::sycl::exception_list eList) {\012  for (std::exception_ptr const &e : eList) {\012    try {\012      std::rethrow_exception(e);\012    } catch (std::exception const &e) {\012#if _DEBUG\012      std::cout << \"Failure\" << std::endl;\012#endif\012      std::terminate();\012    }\012  }\012};\012\012// The TimeInterval is a simple RAII class.\012// Construct the timer at the point you want to start timing.\012// Use the Elapsed() method to return time since construction.\012\012class TimeInterval {\012 public:\012  TimeInterval() : start_(std::chrono::steady_clock::now()) {}\012\012  double Elapsed() {\012    auto now = std::chrono::steady_clock::now();\012    return std::chrono::duration_cast<Duration>(now - start_).count();\012  }\012\012 private:\012  using Duration = std::chrono::duration<double>;\012  std::chrono::steady_clock::time_point start_;\012};\012\012};  // namespace dpc_common\012\012#endif\012"}, {"path":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "name":"matrix-multi-para-v1.cpp", "has_active_debug_locs":false, "absName":"/home/u75983/dpcpp-tutorial/matrix-multi/build/src/matrix-multi-para-v1.cpp", "content":"//==============================================================\012// DPC++ Example\012//\012// Matrix Multiplication with DPC++\012//\012// Author: Yan Luo\012//\012// Copyright ©  2020-\012//\012// MIT License\012//\012#include <CL/sycl.hpp>\012#include <array>\012#include <iostream>\012#include \"dpc_common.hpp\"\012#if FPGA || FPGA_EMULATOR || FPGA_PROFILE\012#include <CL/sycl/INTEL/fpga_extensions.hpp>\012#endif\012\012using namespace sycl;\012\012// matrice shapes for this example.\012// A: a_rows x a_columns\012// B: a_columns x b_columns\012// C,Sum: a_rows x b_columns\012constexpr size_t a_rows = 800;\012constexpr size_t a_columns = 1600;\012constexpr size_t b_columns = 3200;\012\012class MMpara_v1;\012\012void MatrixMulti_para(queue &q, float (*matrix_a)[a_columns], float (*matrix_b)[b_columns], \012  float (*matrix_c)[b_columns], float (*matrix_d_parallel)[b_columns]) {\012\012  std::cout << \"MatrixMultiplication using parallel_for() v1.\" << std::endl;\012\012  // Create the range object for the arrays managed by the buffer.\012  range<2> num_items{a_rows, b_columns};\012\012  // Create buffers that hold the data shared between the host and the devices.\012  // The buffer destructor is responsible to copy the data back to host when it\012  // goes out of scope.\012  buffer<float, 2> a_buf(reinterpret_cast<float *>(matrix_a), range(a_rows, a_columns));\012  buffer<float, 2> b_buf(reinterpret_cast<float *>(matrix_b), range(a_columns, b_columns));\012  buffer<float, 2> c_buf(reinterpret_cast<float *>(matrix_c), num_items);\012  buffer<float, 2> sum_buf(reinterpret_cast<float *>(matrix_d_parallel), num_items);\012\012  // Submit a command group to the queue by a lambda function that contains the\012  // data access permission and device computation (kernel).\012  event e = q.submit([&](handler &h) {\012    // Create an accessor for each buffer with access permission: read, write or\012    // read/write. The accessor is a mean to access the memory in the buffer.\012    auto a = a_buf.get_access<access::mode::read, access::target::global_buffer>(h);\012    auto b = b_buf.get_access<access::mode::read, access::target::global_buffer>(h);\012    auto c = c_buf.get_access<access::mode::read, access::target::global_buffer>(h);\012\012    // The sum_accessor is used to store (with write permission) the sum data.\012    auto sum = sum_buf.get_access<access::mode::write>(h);\012  \012    // Use parallel_for to run vector addition in parallel on device. This\012    // executes the kernel.\012    // 1st parameter is the number of work items in total and in a workgroup\012    //    In our case, we have a two-dimensional nd_range:\012    //    num_items: the global size, or 'all' the work in 2D, i.e. the size\012    //                   of the matrix Sum in 'row' and 'column' dimensions\012    //    range<2>(1,1) : the workgroup size. (1,1) means a workgroup has 1 work item \012    //                    in each dimension \012    // 2nd parameter is the kernel, a lambda that specifies what to do per\012    //    work item. The parameter of the lambda is the work item id.\012    // DPC++ supports unnamed lambda kernel by default.\012    auto kernel_range = nd_range<2>(num_items, range<2>(1,1));\012    h.parallel_for<MMpara_v1>(num_items, [=](id<2> i) \012      { size_t row = i[0], col = i[1];\012\012        float s = 0;\012        //#pragma unroll 2\012        for (size_t k = 0; k < a_columns; k++)\012          s += a[row][k] * b[k][col]; \012\012        sum[row][col]  = c[row][col] + s;\012      });\012  });\012\012#if FPGA || FPGA_PROFILE\012  // Query event e for kernel profiling information\012  // (blocks until command groups associated with e complete)\012  double kernel_time_ns =\012    e.get_profiling_info<info::event_profiling::command_end>() -\012    e.get_profiling_info<info::event_profiling::command_start>();\012\012  // Report profiling info\012  std::cout << \"Kernel compute time:  \" << kernel_time_ns * 1e-6 << \" ms\\n\";\012#endif\012}\012\012//************************************\012// Demonstrate matrix multiplication both in sequential on CPU and in parallel on device.\012//************************************\012int main() {\012  // Create device selector for the device of your interest.\012#if FPGA_EMULATOR\012  // DPC++ extension: FPGA emulator selector on systems without FPGA card.\012  INTEL::fpga_emulator_selector d_selector;\012#elif defined(FPGA) || defined(FPGA_PROFILE)\012  // DPC++ extension: FPGA selector on systems with FPGA card.\012  INTEL::fpga_selector d_selector;\012#else\012  // The default device selector will select the most performant device.\012  default_selector d_selector;\012  //cpu_selector d_selector;\012#endif\012\012  // Query about the platform\012  //\012  unsigned number = 0;\012  auto myPlatforms = platform::get_platforms();\012  // loop through the platforms to poke into\012  for (auto &onePlatform : myPlatforms) {\012    std::cout << ++number << \" found ..\" << std::endl << \"Platform: \" \012    << onePlatform.get_info<info::platform::name>() <<std::endl;\012    // loop through the devices\012    auto myDevices = onePlatform.get_devices();\012    for (auto &oneDevice : myDevices) {\012      std::cout << \"Device: \" \012      << oneDevice.get_info<info::device::name>() <<std::endl;\012    }\012  }\012  std::cout << std::endl;\012\012  // Create matrices with row, column and initial value \012  // to store the input and output data.\012  float(*A)[a_columns] = new float[a_rows][a_columns];\012  // Intialize values\012  for (int i = 0; i < a_rows; i++)\012    for (int j = 0; j < a_columns; j++) A[i][j] = 1.0;\012\012  float(*B)[b_columns] = new float[a_columns][b_columns];\012  // Intialize values\012  for (int i = 0; i < a_columns; i++)\012    for (int j = 0; j < b_columns; j++) B[i][j] = 2.0;\012\012  float(*C)[b_columns] = new float[a_rows][b_columns];\012  // Intialize values\012  for (int i = 0; i < a_rows; i++)\012    for (int j = 0; j < b_columns; j++) C[i][j] = 3.0;\012\012  float(*sum_sequential)[b_columns] = new float[a_rows][b_columns];\012  float(*sum_parallel)[b_columns] = new float[a_rows][b_columns];\012  // Intialize values\012  for (int i = 0; i < a_rows; i++)\012    for (int j = 0; j < b_columns; j++) {\012      sum_sequential[i][j] = 0.0;\012      sum_parallel[i][j] = 0.0;\012    }\012\012  std::cout << \"Matrix A size: \" << a_rows << \",\" << a_columns << std::endl;\012  std::cout << \"Matrix B size: \" << a_columns << \",\" << b_columns << std::endl;\012  std::cout << \"Matrices C, D size: \" << a_rows << \",\" \012              << b_columns << std::endl;\012\012#ifndef FPGA_PROFILE\012  // Start the timer (using std::chrono)\012  dpc_common::TimeInterval exec_time;    \012\012  // Compute the sum of two arrays in sequential for validation.\012  std::cout << \"computing on host...\" << std::endl;\012  for (size_t i = 0; i < a_rows; i++)\012    for (size_t j = 0; j < b_columns; j++) {\012      sum_sequential[i][j] = C[i][j];\012      for (size_t k = 0; k < a_columns; k++)\012        sum_sequential[i][j] += A[i][k] * B[k][j];\012    }\012\012  double host_time_s = exec_time.Elapsed();\012  std::cout << \"host compute time \" << host_time_s * 1000 << \" ms\\n\";\012#endif\012\012  try {\012    queue q(d_selector, dpc_common::exception_handler, \012            property::queue::enable_profiling{});\012\012    // Print out the device information used for the kernel code.\012    std::cout << \"Running on device: \"\012              << q.get_device().get_info<info::device::name>() << \"\\n\";\012\012\012    // Matrix multiplication in DPC++\012    MatrixMulti_para(q, A, B, C, sum_parallel);\012\012#ifndef FPGA_PROFILE\012    // Verify that the two arrays are equal.\012    for (size_t i = 0; i < a_rows; i++)\012      for (size_t j = 0; j < b_columns; j++) \012        if( abs(sum_sequential[i][j] - sum_parallel[i][j]) > 0.0001) {\012          std::cout << \"not equal\" << std::endl;\012          return -1;\012        }\012    std::cout << \"Matrix multiplication successfully completed on device.\\n\";\012#endif\012\012  } catch (exception const &e) {\012    std::cout << \"An exception is caught for matrix multiplication.\\n\";\012    std::terminate();\012  }\012\012  return 0;\012}\012"}];
var alpha_viewer=false;